import 'package:expand_hit_test/expand_hit_test.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

class ExpandGestureDetector extends GestureDetector {
  ExpandGestureDetector(
      {Key? key,
      Widget? child,
      GestureTapDownCallback? onTapDown,
      GestureTapUpCallback? onTapUp,
      GestureTapCallback? onTap,
      GestureTapCancelCallback? onTapCancel,
      GestureTapCallback? onSecondaryTap,
      GestureTapDownCallback? onSecondaryTapDown,
      GestureTapUpCallback? onSecondaryTapUp,
      GestureTapCancelCallback? onSecondaryTapCancel,
      GestureTapDownCallback? onTertiaryTapDown,
      GestureTapUpCallback? onTertiaryTapUp,
      GestureTapCancelCallback? onTertiaryTapCancel,
      GestureTapDownCallback? onDoubleTapDown,
      GestureTapCallback? onDoubleTap,
      GestureTapCancelCallback? onDoubleTapCancel,
      GestureLongPressDownCallback? onLongPressDown,
      GestureLongPressCancelCallback? onLongPressCancel,
      GestureLongPressCallback? onLongPress,
      GestureLongPressStartCallback? onLongPressStart,
      GestureLongPressMoveUpdateCallback? onLongPressMoveUpdate,
      GestureLongPressUpCallback? onLongPressUp,
      GestureLongPressEndCallback? onLongPressEnd,
      GestureLongPressDownCallback? onSecondaryLongPressDown,
      GestureLongPressCancelCallback? onSecondaryLongPressCancel,
      GestureLongPressCallback? onSecondaryLongPress,
      GestureLongPressStartCallback? onSecondaryLongPressStart,
      GestureLongPressMoveUpdateCallback? onSecondaryLongPressMoveUpdate,
      GestureLongPressUpCallback? onSecondaryLongPressUp,
      GestureLongPressEndCallback? onSecondaryLongPressEnd,
      GestureLongPressDownCallback? onTertiaryLongPressDown,
      GestureLongPressCancelCallback? onTertiaryLongPressCancel,
      GestureLongPressCallback? onTertiaryLongPress,
      GestureLongPressStartCallback? onTertiaryLongPressStart,
      GestureLongPressMoveUpdateCallback? onTertiaryLongPressMoveUpdate,
      GestureLongPressUpCallback? onTertiaryLongPressUp,
      GestureLongPressEndCallback? onTertiaryLongPressEnd,
      GestureDragDownCallback? onVerticalDragDown,
      GestureDragStartCallback? onVerticalDragStart,
      GestureDragUpdateCallback? onVerticalDragUpdate,
      GestureDragEndCallback? onVerticalDragEnd,
      GestureDragCancelCallback? onVerticalDragCancel,
      GestureDragDownCallback? onHorizontalDragDown,
      GestureDragStartCallback? onHorizontalDragStart,
      GestureDragUpdateCallback? onHorizontalDragUpdate,
      GestureDragEndCallback? onHorizontalDragEnd,
      GestureDragCancelCallback? onHorizontalDragCancel,
      GestureForcePressStartCallback? onForcePressStart,
      GestureForcePressPeakCallback? onForcePressPeak,
      GestureForcePressUpdateCallback? onForcePressUpdate,
      GestureForcePressEndCallback? onForcePressEnd,
      GestureDragDownCallback? onPanDown,
      GestureDragStartCallback? onPanStart,
      GestureDragUpdateCallback? onPanUpdate,
      GestureDragEndCallback? onPanEnd,
      GestureDragCancelCallback? onPanCancel,
      GestureScaleStartCallback? onScaleStart,
      GestureScaleUpdateCallback? onScaleUpdate,
      GestureScaleEndCallback? onScaleEnd,
      HitTestBehavior? behavior,
      bool excludeFromSemantics = false,
      DragStartBehavior dragStartBehavior = DragStartBehavior.start,
      this.expandArea = EdgeInsets.zero})
      : super(
            child: child,
            onTapDown: onTapDown,
            onTapUp: onTapUp,
            onTap: onTap,
            onTapCancel: onTapCancel,
            onSecondaryTap: onSecondaryTap,
            onSecondaryTapDown: onSecondaryTapDown,
            onSecondaryTapUp: onSecondaryTapUp,
            onSecondaryTapCancel: onSecondaryTapCancel,
            onTertiaryTapDown: onTertiaryTapDown,
            onTertiaryTapUp: onTertiaryTapUp,
            onTertiaryTapCancel: onTertiaryTapCancel,
            onDoubleTapDown: onDoubleTapDown,
            onDoubleTap: onDoubleTap,
            onDoubleTapCancel: onDoubleTapCancel,
            onLongPressDown: onLongPressDown,
            onLongPressCancel: onLongPressCancel,
            onLongPress: onLongPress,
            onLongPressStart: onLongPressStart,
            onLongPressMoveUpdate: onLongPressMoveUpdate,
            onLongPressUp: onLongPressUp,
            onLongPressEnd: onLongPressEnd,
            onSecondaryLongPressDown: onSecondaryLongPressDown,
            onSecondaryLongPressCancel: onSecondaryLongPressCancel,
            onSecondaryLongPress: onSecondaryLongPress,
            onSecondaryLongPressStart: onSecondaryLongPressStart,
            onSecondaryLongPressMoveUpdate: onSecondaryLongPressMoveUpdate,
            onSecondaryLongPressUp: onSecondaryLongPressUp,
            onSecondaryLongPressEnd: onSecondaryLongPressEnd,
            onTertiaryLongPressDown: onTertiaryLongPressDown,
            onTertiaryLongPressCancel: onTertiaryLongPressCancel,
            onTertiaryLongPress: onTertiaryLongPress,
            onTertiaryLongPressStart: onTertiaryLongPressStart,
            onTertiaryLongPressMoveUpdate: onTertiaryLongPressMoveUpdate,
            onTertiaryLongPressUp: onTertiaryLongPressUp,
            onTertiaryLongPressEnd: onTertiaryLongPressEnd,
            onVerticalDragDown: onVerticalDragDown,
            onVerticalDragStart: onVerticalDragStart,
            onVerticalDragUpdate: onVerticalDragUpdate,
            onVerticalDragEnd: onVerticalDragEnd,
            onVerticalDragCancel: onVerticalDragCancel,
            onHorizontalDragDown: onHorizontalDragDown,
            onHorizontalDragStart: onHorizontalDragStart,
            onHorizontalDragUpdate: onHorizontalDragUpdate,
            onHorizontalDragEnd: onHorizontalDragEnd,
            onHorizontalDragCancel: onHorizontalDragCancel,
            onForcePressStart: onForcePressStart,
            onForcePressPeak: onForcePressPeak,
            onForcePressUpdate: onForcePressUpdate,
            onForcePressEnd: onForcePressEnd,
            onPanDown: onPanDown,
            onPanStart: onPanStart,
            onPanUpdate: onPanUpdate,
            onPanEnd: onPanEnd,
            onPanCancel: onPanCancel,
            onScaleStart: onScaleStart,
            onScaleUpdate: onScaleUpdate,
            onScaleEnd: onScaleEnd,
            behavior: behavior,
            excludeFromSemantics: excludeFromSemantics,
            dragStartBehavior: dragStartBehavior,
            key: key);

  final EdgeInsets expandArea;

  @override
  Widget build(BuildContext context) {
    Widget child = super.build(context);
    return ExpandHitTestWidget(expandArea: expandArea, child: child);
  }
}

class ExpandInkWell extends InkWell {
  const ExpandInkWell(
      {Key? key,
      Widget? child,
      GestureTapCallback? onTap,
      GestureTapCallback? onDoubleTap,
      GestureLongPressCallback? onLongPress,
      GestureTapDownCallback? onTapDown,
      GestureTapUpCallback? onTapUp,
      GestureTapCancelCallback? onTapCancel,
      ValueChanged<bool>? onHighlightChanged,
      ValueChanged<bool>? onHover,
      MouseCursor? mouseCursor,
      Color? focusColor,
      Color? hoverColor,
      Color? highlightColor,
      MaterialStateProperty<Color?>? overlayColor,
      Color? splashColor,
      InteractiveInkFeatureFactory? splashFactory,
      double? radius,
      BorderRadius? borderRadius,
      ShapeBorder? customBorder,
      bool? enableFeedback = true,
      bool excludeFromSemantics = false,
      FocusNode? focusNode,
      bool canRequestFocus = true,
      ValueChanged<bool>? onFocusChange,
      bool autofocus = false,
      this.expandArea = EdgeInsets.zero})
      : super(
          key: key,
          child: child,
          onTap: onTap,
          onDoubleTap: onDoubleTap,
          onLongPress: onLongPress,
          onTapDown: onTapDown,
          onTapUp: onTapUp,
          onTapCancel: onTapCancel,
          onHighlightChanged: onHighlightChanged,
          onHover: onHover,
          mouseCursor: mouseCursor,
          focusColor: focusColor,
          hoverColor: hoverColor,
          highlightColor: highlightColor,
          overlayColor: overlayColor,
          splashColor: splashColor,
          splashFactory: splashFactory,
          radius: radius,
          borderRadius: borderRadius,
          customBorder: customBorder,
          enableFeedback: enableFeedback ?? true,
          excludeFromSemantics: excludeFromSemantics,
          focusNode: focusNode,
          canRequestFocus: canRequestFocus,
          onFocusChange: onFocusChange,
          autofocus: autofocus,
        );

  final EdgeInsets expandArea;

  @override
  Widget build(BuildContext context) {
    Widget child = super.build(context);
    return ExpandHitTestWidget(expandArea: expandArea, child: child);
  }
}
